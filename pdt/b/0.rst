#####
PDT B
#####

****
Info
****

.. _`0a0`:
:0a0: purpose

A git repo has its own logging.  But

- not all activities are associated with repo artefacts
- at least not immediately

Logging is basically loud thinking for the product,
which should also lead to *tributes*,
since tributes are automatically calculated from the repo.

Logging is not a version log (``CHANGELOG``),
but logs *activities* as they happen.

.. _`0a1`:
:0a1: logging time line

The log represents a time line of the development,
that links together other files for the details.


One could include the future in the time line as *todo*.
But *todo* basically means a *plan*.
A *todo* list can therefore be placed as *info*
(``i.rst`` or ``0.rst``) in a `pdt`_ folder.

Logging is an activity that accompanies ``pdt``
and all other development activities.

.. _`0a2`:
:0a2: log folder

In simple cases a ``LOG.rst`` at the root is enough.

A log file links

- sub-logs or
- artefact files

The log can consist of a hierarchy of logs,
if more *threads* are involved.
A *developer* constitutes a *thread*.

If more log files, they are all in a ``log`` folder.
Other artefact are sorted by content into other folders.

::

  LOG
    |- main.rst
    |- dev1.rst
    `- ...



Within a log file the entries are best grouped by day.

.. note:: private developer logs

   Every developer might work on more products.
   So it is a good idea for them to have their own logs
   linking to their different products logs.

   But these logs are

   - private
   - up to the developer and
   - to no concern to the product and
   - NOT in the product repo

   There is no organization beyond the product.
   This means that only the developer knows about
   the other products s/he works on,
   and thus time estimates can only be done
   by the developers considering how much time
   they intend to spend on the product.



.. _`pdt`: https://github.com/rpuntaie/pdt#test
